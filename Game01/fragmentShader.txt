#version 400 core

in vec2 TexCoord;
in vec3 surfaceNormal;
in vec3 toLightSource;
in vec3 toCamera;

out vec4 FragColor;

uniform vec4 customColour;
uniform sampler2D ourTexture;
uniform vec3 light_color;
uniform float shine_damper;
uniform float refelectivity;

void main()
{
	// surface normal and toLightSource vectors have to be normalized before dot product
	vec3 unitNormal = normalize(surfaceNormal);
	vec3 unitLightSource = normalize(toLightSource);

	// determine brightness
	float nDot = dot(unitNormal, unitLightSource);

	// 0.2 instead of 0.0 makes scene brighter
	float brightness = max(nDot, 0.2);
	vec3 diffuseLight = brightness * light_color;

	vec3 unitToCamera = normalize(toCamera);
	vec3 lightDirection = -unitLightSource;
	vec3 reflectedLight = reflect(lightDirection, unitNormal);

	float specularFactor = dot(reflectedLight, unitToCamera);
	specularFactor = max(specularFactor, 0.0);
	float dampedFactor = pow(specularFactor, shine_damper);
	vec3 finalSpecular = dampedFactor * light_color;

	// combine with texture
    FragColor =  vec4(diffuseLight, 1.0) * texture(ourTexture, TexCoord) + vec4(finalSpecular, 1.0);
}